akka {
  loglevel = debug
  actor {
    provider = "cluster"
    debug {
      receive = off
      lifecycle = off
    }
  }
  remote {
    log-remote-lifecycle-events = on

    artery.canonical {
      hostname = ${clustering.ip}
      port = ${clustering.port}
    }



    #artery.bind {
     # hostname = '192.168.0.101' # internal (bind) hostname
     # port = ${clustering.port}?           # internal (bind) port
   # }
  }
  cluster {
    seed-nodes = [
       "akka://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]
    auto-down-unreachable-after = 10s
    sharding {
      # Number of shards used by the default HashCodeMessageExtractor
      # when no other message extractor is defined. This value must be
      # the same for all nodes in the cluster and that is verified by
      # configuration check when joining. Changing the value requires
      # stopping all nodes in the cluster.
      number-of-shards = 300

      rebalance-interval = 5s
       external-shard-allocation-strategy {
          # How long to wait for the client to persist an allocation to  get a all shard locations
          client-timeout = 4s
        }
    }
  }
}

clustering {
 ip = "127.0.0.1"
 ip = ${?CLUSTER_IP}
 port = 1600
 port = ${?CLUSTER_PORT}
 seed-ip = "127.0.0.1"
 seed-ip = ${?CLUSTER_IP}
 seed-ip = ${?SEED_PORT_1600_TCP_ADDR}
 seed-port = 1600
 seed-port = ${?SEED_PORT_1600_TCP_PORT}
 cluster.name = clustering-cluster
}

networking {
    port = 2500
    port = ${?LISTEN_TCP_PORT}
}
